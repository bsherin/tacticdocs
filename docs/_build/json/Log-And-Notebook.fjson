{"body": "<div class=\"section\" id=\"the-log-and-notebook\">\n<h1>The Log and Notebook<a class=\"headerlink\" href=\"#the-log-and-notebook\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>As mentioned in the section on the <a class=\"reference external\" href=\"Main-interface.html\">Main Interface</a>,\nthere is a component at the bottom of the screen called the Log. Tiles\ncan send information to the Log, and some error messages will show up\nthere. The Log is also designed to be used more like a full-fledged\npython notebook.</p>\n<p>Furthermore, you can also create projects that consist of nothing more\nthan a Notebook of this sort. There are two ways to create one of these\nNotebook projects. First, from within the Main Interface, you can go to\nthe Project menu and select <strong>open-console-as-notebook</strong>. This will\nstart a Notebook project using the correct contents of the Log (but will\nnot copy internal state).</p>\n<p>The second way to create a Notebook project is from the collection\nmanager. Just click the <strong>new notebook</strong> button as as shownin the figure\nbelow.</p>\n<p><img alt=\"image0\" src=\"../_images/663fd636.png\" /></p>\n<p>Logs and Notebooks pretty much work the same way. You use the buttons at\nthe top to manually add new elements:</p>\n<p><img alt=\"image1\" src=\"../_images/e64e7678.png\" /></p>\n<div class=\"section\" id=\"text-fields\">\n<h2>Text fields<a class=\"headerlink\" href=\"#text-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can create a text field by clicking the <strong>+text</strong> button. You\u2019ll get\nsomething that looks like this:</p>\n<p><img alt=\"image2\" src=\"../_images/06ca6226.png\" /></p>\n<p>You\u2019ll notice three buttons on the left of the field. The top one\nshrinks and expands the field. The middle one deletes the text field\nentirely. Clicking the bottom button causes the contents to be\ninterpreted as markdown:</p>\n<p><img alt=\"image3\" src=\"../_images/a6aa511c.png\" /></p>\n<p>Clicking the bottom button again toggles the display back to plain text.</p>\n</div>\n<div class=\"section\" id=\"code-fields\">\n<h2>Code fields<a class=\"headerlink\" href=\"#code-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You create a code field by clicking the <strong>+code</strong> button:</p>\n<p><img alt=\"image4\" src=\"../_images/55cbd9bd.png\" /></p>\n<p>The top two buttons here do the same thing as for text fields. The two\nnew buttons execute the code and clear any output that was generated on\nprevious runs.</p>\n<p>In many ways, code fields in Logs and Notebooks function like a tile.\nYou can write any code that you can write in a tile, which means you can\ntest code here, and that you have access to the whole tile API.\n(However, some of these commands won\u2019t make sense in Notebooks.)</p>\n<p>Any local variables you introduce within a code field are added to the\nglobal namespace. This means that these variables shared across the code\nfields in your Log/Notebook.</p>\n<p>Like a tile, output here is treated as html. So you might need to add\nhtml tags to get the output that you want. For example, you might want\nto wrap your output in <em>pre</em> tags.</p>\n<p>You can display plots in the console just as you\u2019d expect. At the\npresent time, to do so, you have to use the same magic commands as in a\ntile. So it\u2019s a little ugly:</p>\n<p><img alt=\"image5\" src=\"../_images/59bba4c7.png\" /></p>\n</div>\n<div class=\"section\" id=\"some-final-generalities\">\n<h2>Some final generalities<a class=\"headerlink\" href=\"#some-final-generalities\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can <strong>reorder</strong> fields by dragging on the button panel on the left\nof any field.</p>\n<p>About the <strong>reset</strong> button:</p>\n<p>Clicking the reset button does a few different things:</p>\n<ul class=\"simple\">\n<li>It deletes any error messages that were automatically added to the\nLog.</li>\n<li>It clears the output area of any code tiles.</li>\n<li>It stops and restarts the python process so that the internal state\nis entirely cleared.</li>\n</ul>\n<p>About <strong>saving</strong>:</p>\n<p>When you save a standard project, the Log is saved as pure html. That\nmeans that it will <em>look</em> the same when you open the project. But the\nstate of the Log is not saved; none of the variables you have defined\nare saved.</p>\n<p>However, when you save a Notebook project, Tactic attempts to save both\nthe appearance <em>and internal state</em> of the Notebook.</p>\n</div>\n</div>\n", "alabaster_version": "0.7.10", "display_toc": true, "title": "The Log and Notebook", "sourcename": "Log-And-Notebook.rst.txt", "customsidebar": null, "metatags": "", "current_page_name": "Log-And-Notebook", "next": {"link": "../Which-tiles-are-available-when/", "title": "Tile Availability"}, "rellinks": [["genindex", "General Index", "I", "index"], ["Which-tiles-are-available-when", "Tile Availability", "N", "next"], ["Main-interface", "The Main Interface", "P", "previous"]], "meta": {}, "parents": [], "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">The Log and Notebook</a><ul>\n<li><a class=\"reference internal\" href=\"#text-fields\">Text fields</a></li>\n<li><a class=\"reference internal\" href=\"#code-fields\">Code fields</a></li>\n<li><a class=\"reference internal\" href=\"#some-final-generalities\">Some final generalities</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../Main-interface/", "title": "The Main Interface"}, "page_source_suffix": ".rst"}