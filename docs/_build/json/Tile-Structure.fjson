{"body": "<div class=\"section\" id=\"tile-structure\">\n<h1>Tile Structure<a class=\"headerlink\" href=\"#tile-structure\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Every user tile is a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">TileBase</span></code>. Each tile is also\nassociated with a queue to which events are added by the system. A\nseparate process periodically checks this queue and sends relevant\nevents to the tile.</p>\n<p>The simplest user tile subclasses <code class=\"docutils literal notranslate\"><span class=\"pre\">TileBase</span></code> and includes a method\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">render_content</span></code>. This method will be called by the system\nwhenever the tile receives a RefreshTile event from the system.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@user_tile</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTile</span><span class=\"p\">(</span><span class=\"n\">Tilebase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># user code here</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_html</span>\n</pre></div>\n</div>\n<p>The method <code class=\"docutils literal notranslate\"><span class=\"pre\">render_conent</span></code> should return html that will be displayed\nin the body of the tile. The decorator <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;user_tile</span></code> informs the system\nthat the following class is a tile that should be displayed in the menu\nof user tiles available for the user.</p>\n<p>A more elaborate tile might look like this:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@user_tile</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTile</span><span class=\"p\">(</span><span class=\"n\">TileBase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>  <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;number_to_show&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;int&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;text_source&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;column_select&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my_list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;custom_list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;special_list&quot;</span><span class=\"p\">:</span> <span class=\"n\">mylist</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># user code here</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_html</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"options\">\n<h2>Options<a class=\"headerlink\" href=\"#options\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The new ingredient here is options. Each tile can include a property\nnamed \u2018options\u2019 that defines what fields will be displayed on the back\nof the tile. This property should be a list of dicts. Each dict should\nhave two keys: <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> has the name of the field\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code> is the type. Obviously. At present the option types are:</p>\n<ul class=\"simple\">\n<li><em>text</em>. A single line text field.</li>\n<li><em>int</em>. An integer.</li>\n<li><em>textarea</em>. A multi-line text field.</li>\n<li><em>codearea</em>. This is functionally the same as a textarea option. But\nit displays as syntax-highlighted python code.</li>\n<li><em>column_select</em>. Displays a popup list with the names of the columns\nin the table.</li>\n<li><em>document_select</em>. Displays a popup list with the names of the\ndocuments in the collection.</li>\n<li><em>list_select</em>. Displays a popup list of the users lists.</li>\n<li><em>collection_select</em>. Displays a popup list of the users data\ncollection.</li>\n<li><em>palette_select</em>. Displays a popup list of available matplotlib color\npalettes. These can be used in tandem with with ColorMapper.</li>\n<li><em>pipe_select</em>. Displays a popup list of available variables exported\nby other tiles.</li>\n<li><em>custom_list</em>. Displays a popup list of special list. Requires an\nextra attribute in option dict named \u201cspecial_list.\u201d</li>\n<li><em>function_select</em>. Displays a popup list of available user functions.\nIt has an options extract attribute \u201ctag\u201d. If tag is given then the\nlist of functions is restricted to those with this tag.</li>\n<li><em>class_select</em>. Displays a popup list of available user classes. It\nhas an options extract attribute \u201ctag\u201d. If tag is given then the list\nof classes is restricted to those with this tag.</li>\n<li><em>boolean</em>. Displays a checkbox.</li>\n<li><em>tile_select</em>. Displays a list of the names of all of the tiles in\nthe current project.</li>\n</ul>\n<p>By default, when the user clicks \u201csubmit\u201d on the back of the tile, the\nvalues in each of the fields will be stored as properties in the tile\ninstance. For example, if a user has an option field named\n\u201cparticipant,\u201d then the value entered there by the user will be stored\nin \u2018self.participant\u2019 in the tile (when the user clicks submit). More on\nthis below.</p>\n</div>\n<div class=\"section\" id=\"category-exports-inits-save-attrs\">\n<h2>Category exports inits save_attrs<a class=\"headerlink\" href=\"#category-exports-inits-save-attrs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A still more elaborate tile might look like this:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@user_tile</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTile</span><span class=\"p\">(</span><span class=\"n\">TileBase</span><span class=\"p\">):</span>\n    <span class=\"n\">category</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;utility&quot;</span>\n    <span class=\"n\">exports</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;result&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tags&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">}]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">main_id</span><span class=\"p\">,</span> <span class=\"n\">tile_id</span><span class=\"p\">,</span> <span class=\"n\">tile_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">TileBase</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">main_id</span><span class=\"p\">,</span> <span class=\"n\">tile_id</span><span class=\"p\">,</span> <span class=\"n\">tile_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number_to_show</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;result&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>  <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;number_to_show&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;int&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;text_source&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;column_select&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my_list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;custom_list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;special_list&quot;</span><span class=\"p\">:</span> <span class=\"n\">mylist</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># user code here</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Result computed from somewhere&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_html</span>\n</pre></div>\n</div>\n<p>There are several new things here.</p>\n<ul class=\"simple\">\n<li><em>category</em>. Specifying the category, as shown above, determines the\nmenu that the tile will appear in. This can be anything you want. If\nyou don\u2019t specify anything, it will appear in a menu titled \u201cBasic.\u201d</li>\n<li><em>exports</em>. This is a list of dictionaries specifying information\nabout tile parameters that you want to be available as pipes to other\ntiles.</li>\n<li><em>inits</em>. You can determine the initial value for an option by\ninitializing the relevant variable in the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method. In the\nabove example, this was done for the parameter named\n\u2018number_to_show\u2019.</li>\n<li><em>save_attrs</em>. This specifies the names of the parameters of the tile\nthat will be saved when the project is saved. Tactic automatically\nadds a number of parameters to this list, including some that are\ncrucial to the functioning of any tile, as well as all of the options\nfor the tile. So you should generally add to this list, rather than\nreplace it wholesale. It is usually good practice to all all\nparameters that are exported to the list of save_attrs. The\ntile_creator does this.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"events-and-default-handlers\">\n<h2>Events and default handlers<a class=\"headerlink\" href=\"#events-and-default-handlers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>I suspect that a large fraction of user tiles will look like the second\nexample above. But there are more elaborate possibilities. The full list\nof events handled by tiles follows. When each of these events is\nreceived, a method within the tile is called. Each of these events is\nhandled, in some manner, by TileBase (although sometimes it does\nnothing). But they can also be handled by a user tile to introduce\ncustom behavior.</p>\n<ul class=\"simple\">\n<li><em>RefreshTile</em>. When a tile receives this event, it calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render_content()</span></code>. This does nothing by default.</li>\n<li><em>UpdateOptions</em>. This event is generated when the user clicks submit\non the back of the tile. When a tile receives this event, it calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_options(form_data)</span></code>, with form_data being a dictionary\ncontaining the data in the fields. The version of update_options in\nTileBase takes these values and assigns them to attributes of the\ntile. In the case of list_select, tokenizer_select, pip_select, and\nweight_function_select, the name of the relevant resource attribute\nwill contain the name of the resource as a string. One of the\nfunctions must be used to access the string associated with the\nresource. In the case of the int option, update_options converts this\nto an int. The default version of update_options also shows the front\nthe tile, then does a spin_and_refresh.</li>\n<li><em>TileButtonClick</em>. This event is generated when the user clicks a\nbutton within the body of a tile (i.e., one that was placed there by\na call to render_content). When this event is generated, TileBase\ncalls <code class=\"docutils literal notranslate\"><span class=\"pre\">handle_button_click(value,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>,\nwhere value is the button value. By default, this does nothing.</li>\n<li><em>TileSelectChange</em>. This event is generated when the user changes the\nvalue of a select element in the body of the the child. TileBase\ncalls <code class=\"docutils literal notranslate\"><span class=\"pre\">handle_select_change(value,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>,\nwhere value is the value selected.</li>\n<li><em>TileFormSubmit</em>. This event is generated when the user clicks a\nsubmit in a form within the body of a tile (i.e., one that was placed\nthere by a call to render_content). When this event is generated,\nTileBase calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_form_submit(form_data,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>, where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">form_data</span></code> is a dictionary in which the keys are the names of\nelements in the form, and the values is their current values. Note\nthat one of these entries will correspond to the submit button\nitself. By default, handle_form_submit does nothing.</li>\n<li><em>LogTile</em>. This event is generated when the user clicks the log\nbutton near the top right corner of the tile. When this is generated,\nTileBase calls <code class=\"docutils literal notranslate\"><span class=\"pre\">handle_log_tile()</span></code>. By default this uses\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.log_it()</span></code> to write the current html on the tile\u2019s face to the\nlog.</li>\n<li><em>TileTextAreaChange</em>. This event is generated when the user changes\nthe contents of a textarea DOM element on the front of the tile. When\nthis event is generated, TileBase call\n\u2018handle_textarea_change(value)\u2019 where value is the current contents\nof the text area. By default, this does nothing.</li>\n<li><em>CellChange</em>. This event is generated when the user changes the\ncontent of a cell in the table. When it receives this event, it calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_cell_change(column_header,</span> <span class=\"pre\">row_index,</span> <span class=\"pre\">old_content,</span> <span class=\"pre\">new_content,</span> <span class=\"pre\">doc_name)</span></code>.\ncolumn_header is the name of the column; row_index is the row number;\nold_content is the text that was previously in the cell; new_content\nis the new text in the cell.</li>\n<li><em>TextSelect</em>. This event is generated when the user highlights text\nin a cell. TileBase calls <code class=\"docutils literal notranslate\"><span class=\"pre\">handle_text_select(selected_text)</span></code>. By\ndefault this does nothing.</li>\n<li><em>DocChange</em>. This event is generated when the changes the document\nthat is visible in the table. TileBase calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_doc_change(doc_name)</span></code>. By default this does nothing.</li>\n<li><em>PipeUpdate</em>. This event is generated when a pipe property (a tile\u2019s\nexported property value) is updated. It calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_pipe_update(pipe_name)</span></code>. (I think this might not be\nimplemented yet.)</li>\n<li><em>TileWordClick</em>. This event is generated when the user clicks on a\nword anywhere on the front of a tile. (I think the text has to be on\nan element of class .word-clickable.) This calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_tile_word_click(clicked_word,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>.\nBy default this searches the visible table for any appearances of\nclick_word and highlights them.</li>\n<li><em>TileRowClick</em>. Generated when user clicks a table cell on a tile\nthat is of class .row-clickable. This calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_tile_row_click(clicked_row,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>.\nclicked_row has a list of text of the cells in the row.</li>\n<li><em>TileElementClick</em>. Generated when user on any element on the front\nof a tile that has a class .element-clickable. This calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_tile_element_click(dataset,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>.\nThe value of dataset is determined in a very flexible manner; namely,\nit grabs any data- attributes associated with the clicked element.\nFor example, if the element has attributes <code class=\"docutils literal notranslate\"><span class=\"pre\">data-somevar=&quot;hello&quot;</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">data-anothervar=&quot;world&quot;</span></code> then dataset will be the dictionary\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{&quot;somevar&quot;:</span> <span class=\"pre\">&quot;hello&quot;,</span> <span class=\"pre\">&quot;anothervar&quot;:</span> <span class=\"pre\">&quot;world&quot;}</span></code></li>\n<li><em>TileCellClick</em>. Generated when user clicks a table cell on a tile\nthat is of class .cell-clickable. This calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_tile_cell_click(clicked_text,</span> <span class=\"pre\">doc_name,</span> <span class=\"pre\">active_row_index)</span></code>.\nclicked_text is the text content of the cell.</li>\n<li><em>TileSizeChange</em>. This event is generated when the user changes the\nsize of the tile. By default, when this event is generated,\nself.width and self.height are changed to the new values. Then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_size_change()</span></code> is called.</li>\n<li><em>TileMessage</em>. This event is generated when a tile sends a message\nwith the send_tile_message command. When this event is generated,\nthen there is a call to the tile method\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_tile_message(event_name,</span> <span class=\"pre\">data)</span></code>. (See <a class=\"reference external\" href=\"Tile-Commands.html#other\">Tile Commands:\nOther</a>)</li>\n</ul>\n<p>In addition, there are some events that I think it is unlikely that the\nuser will want to mess with</p>\n<ul class=\"simple\">\n<li><em>ShowFront</em>. By default this shows the tile\u2019s front by calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">this.show_front()</span></code>.</li>\n<li><em>StartSpinner, StopSpinner</em>. By default, these start and stop the\ntile spinners (the animations showing that the tile is busy working\non something). To do this, TileBase calls <code class=\"docutils literal notranslate\"><span class=\"pre\">self.start_spinner()</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">self.stop_spinner()</span></code></li>\n<li><em>RefreshTileFromSave</em>. By default, this tells the tile to use the\nhtml in <code class=\"docutils literal notranslate\"><span class=\"pre\">self.current_html</span></code> for the front side of the tile.</li>\n<li><em>RebuildTileForms</em>. This tells the tile to rebuild the html for the\nback side of the tile.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"working-directly-with-events\">\n<h2>Working directly with events<a class=\"headerlink\" href=\"#working-directly-with-events\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can, if you choose, post events directly to a tile\u2019s events queue:</p>\n<div class=\"code python highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_event</span><span class=\"p\">(</span><span class=\"n\">event_name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "alabaster_version": "0.7.10", "display_toc": true, "title": "Tile Structure", "sourcename": "Tile-Structure.rst.txt", "customsidebar": null, "metatags": "", "current_page_name": "Tile-Structure", "next": {"link": "../Tile-Commands/", "title": "Tile Commands"}, "rellinks": [["genindex", "General Index", "I", "index"], ["Tile-Commands", "Tile Commands", "N", "next"], ["Tile-Version-History-And-Compare", "History and Compare", "P", "previous"]], "meta": {}, "parents": [], "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tile Structure</a><ul>\n<li><a class=\"reference internal\" href=\"#options\">Options</a></li>\n<li><a class=\"reference internal\" href=\"#category-exports-inits-save-attrs\">Category exports inits save_attrs</a></li>\n<li><a class=\"reference internal\" href=\"#events-and-default-handlers\">Events and default handlers</a></li>\n<li><a class=\"reference internal\" href=\"#working-directly-with-events\">Working directly with events</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../Tile-Version-History-And-Compare/", "title": "History and Compare"}, "page_source_suffix": ".rst"}